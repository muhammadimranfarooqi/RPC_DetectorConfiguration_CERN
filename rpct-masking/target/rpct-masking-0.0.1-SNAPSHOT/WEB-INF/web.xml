<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>rpct-masking</display-name>
	<welcome-file-list>
		<welcome-file>faces/index.jspx</welcome-file>
	</welcome-file-list>

	<!--
		Use client-side state saving. In Trinidad, it is an optimized,
		token-based mechanism that is almost always a better choice than the
		standard JSF server-side state saving.
	-->
	<context-param>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>client</param-value>
		<!--param-value>server</param-value-->
	</context-param>

	<context-param>
		<param-name>javax.faces.DEFAULT_SUFFIX</param-name>
		<param-value>.jspx</param-value>
	</context-param>

	<!-- Set to true for using the lightweight dialog feature -->
	<context-param>
		<param-name>
			org.apache.myfaces.trinidad.ENABLE_LIGHTWEIGHT_DIALOGS
		</param-name>
			<param-value>false</param-value>
	</context-param>

	<!--
		Temporary internal flag to set to enabled and test Optimized PPR
	-->
	<context-param>
		<param-name>
			org.apache.myfaces.trinidadinternal.ENABLE_PPR_OPTIMIZATION
		</param-name>
			<param-value>false</param-value>
	</context-param>

	<!--
		Parameter to set the maximum number of client view state tokens.
		Uncomment this to test low-token-count scenarios. <context-param>
		<param-name>org.apache.myfaces.trinidad.CLIENT_STATE_MAX_TOKENS</param-name>
		<param-value>3</param-value> </context-param>
	-->

	<!--
		Trinidad by default uses an optimized client-side state saving
		mechanism. To disable that, uncomment the following
	-->
	<!--
		context-param>
		<param-name>org.apache.myfaces.trinidad.CLIENT_STATE_METHOD</param-name>
		<param-value>all</param-value> </context-param
	-->

	<!--
		Trinidad also supports an optimized strategy for caching some view
		state at an application level, which significantly improves
		scalability. However, it makes it harder to develop (updates to pages
		will not be noticed until the server is restarted), and in some rare
		cases cannot be used for some pages (see Trinidad documentation for
		more information)
	-->
	<context-param>
		<param-name>
			org.apache.myfaces.trinidad.USE_APPLICATION_VIEW_CACHE
		</param-name>
			<param-value>false</param-value>
	</context-param>
	<!--
		If this parameter is enabled, Trinidad will automatically check the
		modification date of your JSPs, and discard saved state when they
		change. Trinidad will also automatically check if your skinning css
		files have changed without having to restart the server; this makes
		development easier, but adds overhead that should be avoided when your
		application is deployed.
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</param-name>
		<param-value>false</param-value>
	</context-param>

	<!--
		Enables Change Persistence at a session scope. By default, Change
		Persistence is entirely disabled. The ChangeManager is an API, which
		can persist component modifications (like, is a showDetail or tree
		expanded or collapsed). For providing a custom Change Persistence
		implementation inherit from the Trinidad API's ChangeManager class. As
		the value you have to use the fullqualified class name.
	-->
	<context-param>
		<param-name>org.apache.myfaces.trinidad.CHANGE_PERSISTENCE</param-name>
		<param-value>session</param-value>
	</context-param>

	<context-param>
		<param-name>org.apache.myfaces.trinidad.resource.DEBUG</param-name>
		<param-value>false</param-value>
	</context-param>
	<context-param>
		<param-name>org.apache.myfaces.trinidad.DEBUG_JAVASCRIPT</param-name>
		<param-value>true</param-value>
	</context-param>

	<!--
		With setting this parameter you are able to specify the logical
		outcome prefix to launch the dialog framework. If not set, the default
		value (dialog:) is used.
	-->
	<!--
		context-param>
		<param-name>org.apache.myfaces.trinidad.DIALOG_NAVIGATION_PREFIX</param-name
		> <param-value>userInputHere:</param-value> </context-param
	-->

	<!--
		Uncomment the below for use with Facelets <context-param>
		<param-name>org.apache.myfaces.trinidad.ALTERNATE_VIEW_HANDLER</param-name>
		<param-value>com.sun.facelets.FaceletViewHandler</param-value>
		</context-param> <context-param>
		<param-name>facelets.VIEW_MAPPINGS</param-name>
		<param-value>*.xhtml</param-value> </context-param> <context-param>
		<param-name>facelets.SKIP_COMMENTS</param-name>
		<param-value>true</param-value> </context-param>
	-->

	<filter>
		<filter-name>trinidad</filter-name>
		<filter-class>org.apache.myfaces.trinidad.webapp.TrinidadFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>trinidad</filter-name>
		<servlet-name>faces</servlet-name>
	</filter-mapping>

	<!-- Faces Servlet -->
	<servlet>
		<servlet-name>faces</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
	</servlet>

	<!-- resource loader servlet -->
	<servlet>
		<servlet-name>resources</servlet-name>
		<servlet-class>
			org.apache.myfaces.trinidad.webapp.ResourceServlet
		</servlet-class>
	</servlet>

	<!-- Faces Servlet Mappings -->
	<servlet-mapping>
		<servlet-name>faces</servlet-name>
		<url-pattern>/faces/*</url-pattern>
	</servlet-mapping>

	<servlet-mapping>
		<servlet-name>resources</servlet-name>
		<url-pattern>/adf/*</url-pattern>
	</servlet-mapping>
</web-app>